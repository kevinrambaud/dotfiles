call plug#begin()

Plug 'chriskempson/base16-vim' " Color scheme
Plug 'honza/vim-snippets' " Snippets
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Fuzzy finder
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-signify' " Git sign in column
Plug 'tpope/vim-fugitive' " Git wrapper with tons of commands
Plug 'tpope/vim-vinegar' " Netrw enhanced
Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parentheses or quotes in pair
Plug 'tpope/vim-surround' " Make it easy to add, change or remove brackets, parentheses and more
Plug 'tpope/vim-commentary' " Comment and uncomment single line or selected block of code
Plug 'tpope/vim-repeat' " Allow plugins map to be repeated with dot
Plug 'junegunn/goyo.vim' " Distraction free mode
Plug 'editorconfig/editorconfig-vim' " Set spaces, tabs and other settings per project
Plug 'ntpeters/vim-better-whitespace' " Highlight and remove extra whitespaces
Plug 'sheerun/vim-polyglot' " Syntax color
Plug 'kevinrambaud/emmet-vim' " Provide support for expanding abbreviations from emmet

call plug#end()

" Color scheme settings
syntax on
set background=dark
set termguicolors
colorscheme base16-tomorrow-night

set autowrite
set number
set splitright
set clipboard^=unnamedplus
set backspace=indent,eol,start

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=1

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=100

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Smoother scrolling when moving horizontally
set sidescroll=1

set softtabstop=2
set tabstop=2
set shiftwidth=2
set expandtab
" set relativenumber
set showmatch
set ignorecase
set smartindent

" Set leader shortcut to a comma ','. By default it's the backslash
let mapleader = " "

" Disable autocommenting on newline: https://stackoverflow.com/questions/6076592/vim-set-formatoptions-being-lost
"au BufNewFile,BufWinEnter * setlocal formatoptions-=cro

" Custom key mappings
imap jj <ESC>
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
map <leader>f :Rg<CR>
map <leader>e :Ex<CR>
tnoremap <Esc> <C-\><C-n>

" Move lines keymap
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

nnoremap <silent> <C-p> :FZF -m<cr>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.5, 'highlight': 'Todo', 'rounded': v:false } }

" Netrw settings
let g:vim_markdown_folding_disabled = 1
let g:netrw_banner = 0

" Resize splits when vim changes size (like with tmux opening/closing)
augroup auto-resize
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Polyglot settings
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" UltiSnips settings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Signify
let g:signify_sign_add    = '┃'
let g:signify_sign_change = '┃'
let g:signify_sign_delete = '▶'
let g:signify_sign_delete_first_line = '▶'
let g:signify_sign_show_count = 0 " Don’t show the number of deleted lines.

" Better whitespace settings
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

